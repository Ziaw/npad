using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Compiler;

using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace NPad
{
  /// <summary>
  /// Description of Compiler.
  /// </summary>
  public class ManagedCompiler: ICompiler
  {
      mutable nemerlePath : string;
      
      public Compile(fileName : FileInfo, log : TextWriter) : Assembly
      {
        def options = CompilationOptions();
        def manager = ManagerClass(options);
        mutable wasError = false;

        unless (String.IsNullOrEmpty(nemerlePath))
          options.LibraryPaths ::= nemerlePath;

        options.LibraryPaths ::= Environment.CurrentDirectory;
        
        foreach (line in File.ReadLines(fileName.FullName))
        {
          regexp match (line)
          {
            | @".*///?\s*references?\s*:?\s*(?<assembly>.+)\s*"
            | @"\s*using (?<assembly>\S+);\s*///?\s*references?\s*" => 
              options.ReferencedLibraries ::= assembly;
            | _ => 
              ();
          }
        }
        
          
        manager.InitOutput(TextWriter.Null);
        manager.MessageOccured += (_, msg) => log.WriteLine(msg);
        manager.ErrorOccured += (_, _) => wasError = true;
        
        options.IgnoreConfusion = true;
        options.ProgressBar = false;
        options.Sources = [FileSource(fileName.FullName, options.Warnings)];
        options.CompileToMemory = true;
        options.ColorMessages = false;
            
        def compile(_)
        {
          try
          {
            manager.Run();
          }
          catch
          {
            | _ is Recovery => ()
            | e => 
              log.WriteLine(e);
          }
        }

        // compiler crashes on default stack size
        def largeStackThread = Thread(compile, 5*IntPtr.Size*1024*1024);
            
        largeStackThread.Start();
        largeStackThread.Join();
        
        if (wasError)
            null
        else
            manager.GeneratedAssembly
      }
      
      public SetNemerlePath(path : string) : void
      {
      	nemerlePath = path;
      }
  }
}
